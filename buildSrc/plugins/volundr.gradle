//import my-gradle-build stuff
import net.sf.mygradlebuild.plugins.DefaultContinousBuildPlugin
import net.sf.mygradlebuild.plugins.EclipseSettingsPlugin
import net.sf.mygradlebuild.plugins.EnvironmentVariablesPlugin
import net.sf.völundr.JCenter
import net.sf.mygradlebuild.plugins.ReportingPlugin
import net.sf.völundr.BuildPlugin
import net.sf.völundr.ExportAntBuildFilePlugin
import net.sf.völundr.JavaDistributionPlugin
import net.sf.völundr.NewJavaProjectPlugin

import org.gradle.api.JavaVersion

ext {
    //make sure these files exist
    jdtInputFile="${buildScripts}/template/for/eclipse/org.eclipse.jdt.core.prefs"
    pmdSettings="${buildScripts}/template/for/pmd/.pmd"

    distributionDir="$buildDir/distributions"

    toolsDir="${projectDir}/tools"

    emmaPlugin="${buildScripts}/plugins/jacoco.gradle"

    artifactVersion='2.1.2'

    distributionExcludes = ["*-lib.jar"]
    distributionBasename = 'völundr-distribution'
}


apply plugin : JCenter
apply plugin : NewJavaProjectPlugin
apply plugin : ReportingPlugin
apply plugin : JavaDistributionPlugin
apply plugin : EnvironmentVariablesPlugin
apply plugin : EclipseSettingsPlugin
apply plugin : ExportAntBuildFilePlugin

apply plugin : BuildPlugin

apply plugin: 'jacoco'

allprojects {
    // In this section you declare where to find the dependencies of your project
    repositories {
        // Use jcenter for resolving your dependencies.
        // You can declare any Maven/Ivy/file repository here.
        jcenter()
    }
}


reportingSettings {
    toolsDirectory = "${toolsDir}"
    onlyAnalyze = 'net.sf.völundr'
    findbugsVersion = '3.0.1'
}

subprojects { prj ->
    apply plugin : DefaultContinousBuildPlugin
    apply plugin:'jacoco'

    compileJava.options.encoding = 'UTF-8'

    forkJdt { jdtInputFile = "${project.properties.jdtInputFile}"  }
    version = prj.parent.artifactVersion
    sourceCompatibility = JavaVersion.VERSION_1_8
    targetCompatibility = JavaVersion.VERSION_1_8

    pmd { toolVersion = '4.3'   }

    task jacocoMerge(type: JacocoMerge) {
        executionData tasks.withType(Test)

        doFirst {
            executionData = files(executionData.findAll { it.exists() })
        }
    }
}

def publishedProjects = subprojects.findAll() { it.path != ':buildSrc' }

task jacocoMerge(type: JacocoMerge) {
    destinationFile = file("${buildDir}/jacoco/merged.exec")
    publishedProjects.each { subproject ->
        executionData subproject.tasks.withType(Test)
    }
    doFirst {
        executionData = files(executionData.findAll { it.exists() })
    }
}

task jacocoAggregateReport(type: JacocoReport, group: 'Coverage reports') { rep ->
    description = 'Generates an aggregate report from all subprojects'
    dependsOn publishedProjects.test, jacocoMerge

    additionalSourceDirs = files(publishedProjects.sourceSets.main.allSource.srcDirs)
    sourceDirectories = files(publishedProjects.sourceSets.main.allSource.srcDirs)
    classDirectories = files(publishedProjects.sourceSets.main.output)
    executionData jacocoMerge.destinationFile

    reports {
        html.enabled = true // human readable
        xml.enabled = true // required by coveralls
    }
}
