//import my-gradle-build stuff
import net.sf.mygradlebuild.plugins.DefaultContinousBuildPlugin
import net.sf.mygradlebuild.plugins.EclipseSettingsPlugin
import net.sf.mygradlebuild.plugins.EnvironmentVariablesPlugin
import net.sf.mygradlebuild.plugins.MavenCentral
import net.sf.mygradlebuild.plugins.ReportingPlugin
import net.sf.völundr.BuildPlugin
import net.sf.völundr.ExportAntBuildFilePlugin
import net.sf.völundr.JavaDistributionPlugin
import net.sf.völundr.NewJavaProjectPlugin

import org.gradle.api.JavaVersion

ext {
    //make sure these files exist
    jdtInputFile="${buildScripts}/template/for/eclipse/org.eclipse.jdt.core.prefs"
    pmdSettings="${buildScripts}/template/for/pmd/.pmd"

    distributionDir="$buildDir/distributions"

    toolsDir="${projectDir}/tools"

    emmaPlugin="${buildScripts}/plugins/jacoco.gradle"

    artifactVersion='2.1.0'

    distributionExcludes = ["*-lib.jar"]
    distributionBasename = 'völundr-distribution'
}


apply plugin : MavenCentral
apply plugin : NewJavaProjectPlugin
apply plugin : ReportingPlugin
apply plugin : JavaDistributionPlugin
apply plugin : EnvironmentVariablesPlugin
apply plugin : EclipseSettingsPlugin
apply plugin : ExportAntBuildFilePlugin

apply plugin : BuildPlugin

reportingSettings {
    toolsDirectory = "${toolsDir}"
    onlyAnalyze = 'net.sf.völundr'
    findbugsVersion = '3.0.1'
}

subprojects { prj ->
    apply plugin : DefaultContinousBuildPlugin
    forkJdt { jdtInputFile = "${project.properties.jdtInputFile}"  }
    version = prj.parent.artifactVersion
    sourceCompatibility = JavaVersion.VERSION_1_8
    targetCompatibility = JavaVersion.VERSION_1_8
    pmd { toolVersion = '4.3'   }
}

apply plugin:'jacoco'
// aggregates jacoco results from all subprojects and core project and generate a report
task jacocoAggregateReport(type: JacocoReport) {

    sourceSets sourceSets.main

    def jacocoTestFiles = []
    subprojects.each { p ->
        def coverageFileLocation = "$p.buildDir/jacoco/test.exec"
        if (new File(coverageFileLocation).exists()) {
            System.out.println("Adding "+ coverageFileLocation)
            jacocoTestFiles.add(coverageFileLocation)
        }
    }

    executionData files(jacocoTestFiles)
    onlyIf = {true}
    reports {
        xml.enabled false
        csv.enabled false
        html.enabled true
    }
}
